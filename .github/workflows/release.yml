name: Auto Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  build-windows:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.calculate_version.outputs.version }}
      artifact-name: ${{ steps.calculate_version.outputs.artifact_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.18.3

      - name: Calculate version
        id: calculate_version
        run: |
          # Extract current version from package.json
          CURRENT_VERSION=$(node -e "console.log(require('./package.json').version)")
          echo "Current version: $CURRENT_VERSION"
          
          # Generate build number based on GitHub run number
          BUILD_NUMBER=${{ github.run_number }}
          
          # Create new version with build number
          NEW_VERSION="${CURRENT_VERSION%.*}.$BUILD_NUMBER"
          echo "New version: $NEW_VERSION"
          
          # Update package.json with new version
          node -e "const pkg = require('./package.json'); pkg.version = '$NEW_VERSION'; require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2))"
          
          # Set as output variables
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "artifact_name=electron-app-windows-v$NEW_VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create .env file
        run: |
          touch .env
          echo "NODE_ENV=test" >> .env
          echo "VITE_REMOTEADD=${{ secrets.VITE_REMOTEADD_TEST }}" >> .env
          echo "VITE_LOGIN_URL=${{ secrets.VITE_LOGIN_URL_TEST }}" >> .env
          echo "UPDATESERVER=${{ secrets.UPDATESERVER }}" >> .env
          cat .env

      - name: Install dependencies
        run: yarn install

      - name: Rebuild electron
        run: yarn electron-rebuild --force --types prod,dev,optional --module-dir .

      - name: Rebuild sqlite3
        run: yarn rebuild-sqlite3

      - name: Rebuild better sqlite
        run: yarn rebuild-better-sqlite

      - name: Install WiX Toolset
        run: |
          Invoke-WebRequest -Uri https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311-binaries.zip -OutFile wix.zip
          Expand-Archive -Path wix.zip -DestinationPath "$env:ProgramFiles\WiX Toolset"
          Remove-Item -Force wix.zip
        shell: pwsh

      - name: Build application
        run: yarn make-win:test

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.calculate_version.outputs.artifact_name }}
          path: out/make

  build-macos:
    runs-on: macos-latest
    outputs:
      version: ${{ steps.calculate_version.outputs.version }}
      artifact-name: ${{ steps.calculate_version.outputs.artifact_name }}

    steps:
      - name: Set up C++20 environment
        run: |
          echo "CXXFLAGS=-std=c++20" >> $GITHUB_ENV
          echo "npm_config_cxxflags=-std=c++20" >> $GITHUB_ENV

      - name: Select available Xcode version
        run: sudo xcode-select -s /Applications/Xcode.app/Contents/Developer

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.18.3

      - name: Calculate version
        id: calculate_version
        run: |
          # Extract current version from package.json
          CURRENT_VERSION=$(node -e "console.log(require('./package.json').version)")
          echo "Current version: $CURRENT_VERSION"
          
          # Generate build number based on GitHub run number
          BUILD_NUMBER=${{ github.run_number }}
          
          # Create new version with build number
          NEW_VERSION="${CURRENT_VERSION%.*}.$BUILD_NUMBER"
          echo "New version: $NEW_VERSION"
          
          # Update package.json with new version
          node -e "const pkg = require('./package.json'); pkg.version = '$NEW_VERSION'; require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2))"
          
          # Set as output variables
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "artifact_name=electron-app-macos-v$NEW_VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create .env file
        run: |
          touch .env
          echo "NODE_ENV=test" >> .env
          echo "VITE_REMOTEADD=${{ secrets.VITE_REMOTEADD_TEST }}" >> .env
          echo "VITE_LOGIN_URL=${{ secrets.VITE_LOGIN_URL_TEST }}" >> .env
          echo "UPDATESERVER=${{ secrets.UPDATESERVER }}" >> .env
          cat .env

      - name: Install setuptools
        run: brew install python-setuptools

      - name: Install dependencies
        run: yarn install

      - name: Download Electron headers
        run: npx electron-rebuild --force --types prod,dev,optional --module-dir .

      - name: Rebuild native modules
        run: npx electron-rebuild

      - name: Rebuild sqlite3
        run: yarn rebuild-sqlite3

      - name: Rebuild better sqlite
        run: yarn rebuild-better-sqlite

      - name: yarn electron-rebuild
        run: yarn electron-rebuild

      - name: Build application
        run: yarn make-mac:test

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.calculate_version.outputs.artifact_name }}
          path: out/make

  create-release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.18.3

      - name: Calculate version
        id: calculate_version
        run: |
          # Extract current version from package.json
          CURRENT_VERSION=$(node -e "console.log(require('./package.json').version)")
          echo "Current version: $CURRENT_VERSION"
          
          # Generate build number based on GitHub run number
          BUILD_NUMBER=${{ github.run_number }}
          
          # Create new version with build number
          NEW_VERSION="${CURRENT_VERSION%.*}.$BUILD_NUMBER"
          echo "New version: $NEW_VERSION"
          
          # Set as output variable
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: electron-app-windows-v${{ steps.calculate_version.outputs.version }}
          path: ./windows-build

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: electron-app-macos-v${{ steps.calculate_version.outputs.version }}
          path: ./macos-build

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.calculate_version.outputs.version }}
          name: Release v${{ steps.calculate_version.outputs.version }}
          body: |
            ## What's Changed
            
            Auto-generated release for version ${{ steps.calculate_version.outputs.version }}
            
            ### Downloads
            - Windows: Download the Windows installer from the assets below
            - macOS: Download the macOS app from the assets below
            
            ### Build Info
            - Build Number: ${{ github.run_number }}
            - Commit: ${{ github.sha }}
            - Branch: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            ./windows-build/**/*
            ./macos-build/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 