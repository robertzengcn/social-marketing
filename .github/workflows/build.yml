name: Build Electron App

on:
  push:
    branches:
      - test
  pull_request:
    branches:
      - test

jobs:
  build-windows:
    runs-on: windows-latest

 
    steps:      
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.18.3
      - name: Calculate version
        id: calculate_version
        run: |
          # Extract current version from package.json
          CURRENT_VERSION=$(node -e "console.log(require('./package.json').version)")
          echo "Current version: $CURRENT_VERSION"
          
          # Generate build number based on GitHub run number
          BUILD_NUMBER=${{ github.run_number }}
          
          # Create new version with build number
          NEW_VERSION="${CURRENT_VERSION%.*}.$BUILD_NUMBER"
          echo "New version: $NEW_VERSION"
          
          # Update package.json with new version
          node -e "const pkg = require('./package.json'); pkg.version = '$NEW_VERSION'; require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2))"
          
          # Set as output variable
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create .env file
        run: |
          touch .env
          echo "NODE_ENV=test" >> .env
          cat .env    
      - name: Create .env file 
        run: |
          touch .env
          echo "VITE_REMOTEADD=${{ secrets.VITE_REMOTEADD_TEST }}" >> .env 
          echo "VITE_LOGIN_URL=${{ secrets.VITE_LOGIN_URL_TEST }}" >> .env         
          cat .env       
      - name: Install dependencies
        run: yarn install
      - name: Rebuild electron
        run: yarn electron-rebuild --force --types prod,dev,optional --module-dir .         
      - name: Rebuild sqlite3
        run: yarn rebuild-sqlite3
      - name: Rebuild better sqlite
        run: yarn rebuild-better-sqlite
      - name: Install WiX Toolset
        run: |
          Invoke-WebRequest -Uri https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311-binaries.zip -OutFile wix.zip
          Expand-Archive -Path wix.zip -DestinationPath "$env:ProgramFiles\WiX Toolset"
          Remove-Item -Force wix.zip
        shell: pwsh

      - name: Build application
        run: yarn make-win:test

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: electron-app-windows-v${{ steps.calculate_version.outputs.version }}
          path: out/make

  build-macos:
    runs-on: macos-latest

    steps:
      - name: Set up C++20 environment
        run: |
          echo "CXXFLAGS=-std=c++20" >> $GITHUB_ENV
          echo "npm_config_cxxflags=-std=c++20" >> $GITHUB_ENV

      # Make sure to use a recent Xcode version
      - name: List available Xcode versions
        run: ls -la /Applications/ | grep Xcode
    
      - name: Select available Xcode version
        run: sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.18.3
      - name: Calculate version
        id: calculate_version
        run: |
          # Extract current version from package.json
          CURRENT_VERSION=$(node -e "console.log(require('./package.json').version)")
          echo "Current version: $CURRENT_VERSION"
          
          # Generate build number based on GitHub run number
          BUILD_NUMBER=${{ github.run_number }}
          
          # Create new version with build number
          NEW_VERSION="${CURRENT_VERSION%.*}.$BUILD_NUMBER"
          echo "New version: $NEW_VERSION"
          
          # Update package.json with new version
          node -e "const pkg = require('./package.json'); pkg.version = '$NEW_VERSION'; require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2))"
          
          # Set as output variable
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create .env file
        run: |
            touch .env
            echo "NODE_ENV=test" >> .env
            cat .env               
      - name: Create .env file 
        run: |
            touch .env  
            echo VITE_REMOTEADD=${{ secrets.VITE_REMOTEADD_TEST }} >> .env
            echo "VITE_LOGIN_URL=${{ secrets.VITE_LOGIN_URL_TEST }}" >> .env
            cat .env
      - name: Install setuptools
        run: |
            brew install python-setuptools           
              
      - name: Install dependencies
        run: yarn install
      - name: Download Electron headers
        run: |
          npx electron-rebuild --force --types prod,dev,optional --module-dir .
      - name: Rebuild native modules
        run: |
          npx electron-rebuild
      - name: Rebuild sqlite3
        run: yarn rebuild-sqlite3
      - name: Rebuild better sqlite
        run: yarn rebuild-better-sqlite    
      - name: yarn electron-rebuild
        run: yarn electron-rebuild   
      - name: Build application
        run: yarn make-mac:test
  
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: electron-app-macos-v${{ steps.calculate_version.outputs.version }}
          path: out/make
